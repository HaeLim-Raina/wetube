{"version":3,"sources":["videoController.js"],"names":["_routes","_interopRequireDefault","require","_Video","home","req","res","videos","regeneratorRuntime","async","_context","prev","next","awrap","Video","find","sent","render","pageTitle","t0","console","error","stop","search","searchingBy","_context2","query","term","title","$regex","$options","getUpload","postUpload","_req$body","description","path","newVideo","_context3","body","create","fileUrl","redirect","routes","videoDetail","id","video","_context4","params","findById","getEditVideo","_context5","concat","postEditVideo","_req$body2","_context6","findOneAndUpdate","_id","deleteVideo","_context7","findOneAndRemove"],"mappings":"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","file":"videoController.min.js","sourcesContent":["import routes from '../routers/routes';\nimport Video from '../models/Video';\n\n// home\nexport const home = async (req, res) => {\n  try {\n    const videos = await Video.find({});\n    res.render('home', { pageTitle: 'Home', videos });\n  } catch (error) {\n    console.error(error);\n    res.render('home', { pageTitle: 'Home', videos: [] });\n  }\n};\n\n// search\nexport const search = async (req, res) => {\n  const {\n    query: { term: searchingBy },\n  } = req;\n\n  let videos = [];\n  try {\n    videos = await Video.find({\n      title: { $regex: searchingBy, $options: 'i' },\n    });\n  } catch (error) {\n    console.log(error);\n  }\n  res.render('search', { pageTitle: 'Search', searchingBy, videos });\n};\n\nexport const getUpload = (req, res) => res.render('upload', { pageTitle: 'Upload' });\n\nexport const postUpload = async (req, res) => {\n  const {\n    body: { title, description },\n    file: { path },\n  } = req;\n\n  const newVideo = await Video.create({\n    fileUrl: path,\n    title,\n    description,\n  });\n\n  // res.render(\"upload\", {pageTitle: \"Upload\"});\n  res.redirect(routes.videoDetail(newVideo.id));\n};\n\nexport const videoDetail = async (req, res) => {\n  const {\n    params: { id },\n  } = req;\n  try {\n    const video = await Video.findById(id);\n    res.render('videoDetail', { pageTitle: 'Video Detail', video });\n  } catch (error) {\n    res.redirect(routes.home);\n  }\n};\n\nexport const getEditVideo = async (req, res) => {\n  const {\n    params: { id },\n  } = req;\n  try {\n    const video = await Video.findById(id);\n    res.render('editVideo', { pageTitle: `Edit ${video.title}`, video });\n  } catch (error) {\n    res.redirect(routes.home);\n  }\n};\n\nexport const postEditVideo = async (req, res) => {\n  const {\n    params: { id },\n    body: { title, description },\n  } = req;\n  try {\n    // const 로 선언하지 않는 이유는 기존의 (이미 선언된) 값을 업데이트만 할 것이기 때문.\n    await Video.findOneAndUpdate({ _id: id }, { title, description });\n  } catch (error) {\n    res.redirect(routes.home);\n  }\n};\n\nexport const deleteVideo = async (req, res) => {\n  const {\n    params: { id },\n  } = req;\n  try {\n    await Video.findOneAndRemove({ _id: id });\n    res.redirect(routes.home);\n  } catch (error) {\n    console.error(error);\n    res.redirect(routes.home);\n  }\n};\n"]}