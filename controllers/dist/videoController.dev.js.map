{"version":3,"sources":["videoController.js"],"names":["home","req","res","Video","find","videos","render","pageTitle","console","error","search","searchingBy","query","term","title","$regex","$options","log","getUpload","postUpload","body","description","path","file","create","fileUrl","newVideo","redirect","routes","videoDetail","id","params","findById","video","getEditVideo","postEditVideo","findOneAndUpdate","_id","deleteVideo","findOneAndRemove"],"mappings":"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","sourcesContent":["import routes from '../routers/routes';\nimport Video from '../models/Video';\n\n// home\nexport const home = async (req, res) => {\n  try {\n    const videos = await Video.find({});\n    res.render('home', { pageTitle: 'Home', videos });\n  } catch (error) {\n    console.error(error);\n    res.render('home', { pageTitle: 'Home', videos: [] });\n  }\n};\n\n// search\nexport const search = async (req, res) => {\n  const {\n    query: { term: searchingBy },\n  } = req;\n\n  let videos = [];\n  try {\n    videos = await Video.find({\n      title: { $regex: searchingBy, $options: 'i' },\n    });\n  } catch (error) {\n    console.log(error);\n  }\n  res.render('search', { pageTitle: 'Search', searchingBy, videos });\n};\n\nexport const getUpload = (req, res) => res.render('upload', { pageTitle: 'Upload' });\n\nexport const postUpload = async (req, res) => {\n  const {\n    body: { title, description },\n    file: { path },\n  } = req;\n\n  const newVideo = await Video.create({\n    fileUrl: path,\n    title,\n    description,\n  });\n\n  // res.render(\"upload\", {pageTitle: \"Upload\"});\n  res.redirect(routes.videoDetail(newVideo.id));\n};\n\nexport const videoDetail = async (req, res) => {\n  const {\n    params: { id },\n  } = req;\n  try {\n    const video = await Video.findById(id);\n    res.render('videoDetail', { pageTitle: 'Video Detail', video });\n  } catch (error) {\n    res.redirect(routes.home);\n  }\n};\n\nexport const getEditVideo = async (req, res) => {\n  const {\n    params: { id },\n  } = req;\n  try {\n    const video = await Video.findById(id);\n    res.render('editVideo', { pageTitle: `Edit ${video.title}`, video });\n  } catch (error) {\n    res.redirect(routes.home);\n  }\n};\n\nexport const postEditVideo = async (req, res) => {\n  const {\n    params: { id },\n    body: { title, description },\n  } = req;\n  try {\n    // const 로 선언하지 않는 이유는 기존의 (이미 선언된) 값을 업데이트만 할 것이기 때문.\n    await Video.findOneAndUpdate({ _id: id }, { title, description });\n  } catch (error) {\n    res.redirect(routes.home);\n  }\n};\n\nexport const deleteVideo = async (req, res) => {\n  const {\n    params: { id },\n  } = req;\n  try {\n    await Video.findOneAndRemove({ _id: id });\n    res.redirect(routes.home);\n  } catch (error) {\n    console.error(error);\n    res.redirect(routes.home);\n  }\n};\n"],"file":"videoController.dev.js"}